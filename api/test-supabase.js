import { getSupabaseClient, getSupabaseAdminClient, getSupabaseStats } from './_supabaseClient.js';

async function testSupabase() {
  console.log('üß™ Iniciando pruebas de Supabase...\n');
  
  try {
    // 1. Probar conexi√≥n b√°sica
    console.log('1Ô∏è‚É£  Probando conexi√≥n b√°sica...');
    const supabase = getSupabaseClient();
    const { data, error } = await supabase
      .from('productos')
      .select('*')
      .limit(1);
    
    if (error) {
      console.log('‚ùå Error de conexi√≥n:', error.message);
      if (error.code === '42P01') {
        console.log('üí° La tabla productos no existe. Crea la tabla primero.');
        return;
      }
    } else {
      console.log('‚úÖ Conexi√≥n exitosa');
      console.log(`üìä Productos encontrados: ${data.length}`);
    }
    
    // 2. Probar cliente admin
    console.log('\n2Ô∏è‚É£  Probando cliente admin...');
    const supabaseAdmin = getSupabaseAdminClient();
    const { data: adminData, error: adminError } = await supabaseAdmin
      .from('productos')
      .select('count')
      .limit(1);
    
    if (adminError) {
      console.log('‚ùå Error con cliente admin:', adminError.message);
    } else {
      console.log('‚úÖ Cliente admin funcionando');
    }
    
    // 3. Probar estad√≠sticas
    console.log('\n3Ô∏è‚É£  Probando estad√≠sticas...');
    const stats = await getSupabaseStats();
    if (stats) {
      console.log('‚úÖ Estad√≠sticas obtenidas:', stats);
    } else {
      console.log('‚ùå No se pudieron obtener estad√≠sticas');
    }
    
    // 4. Probar consultas b√°sicas
    console.log('\n4Ô∏è‚É£  Probando consultas b√°sicas...');
    
    // Contar total de productos
    const { count: totalCount, error: countError } = await supabase
      .from('productos')
      .select('*', { count: 'exact', head: true });
    
    if (countError) {
      console.log('‚ùå Error contando productos:', countError.message);
    } else {
      console.log(`üìä Total de productos: ${totalCount || 0}`);
    }
    
    // Obtener productos por categor√≠a
    const { data: categorias, error: catError } = await supabase
      .from('productos')
      .select('categoria')
      .limit(10);
    
    if (catError) {
      console.log('‚ùå Error obteniendo categor√≠as:', catError.message);
    } else {
      const categoriasUnicas = [...new Set(categorias.map(p => p.categoria).filter(Boolean))];
      console.log(`üè∑Ô∏è  Categor√≠as encontradas: ${categoriasUnicas.length}`);
      console.log('   Ejemplos:', categoriasUnicas.slice(0, 5).join(', '));
    }
    
    // 5. Probar filtros
    console.log('\n5Ô∏è‚É£  Probando filtros...');
    
    // Productos destacados
    const { data: destacados, error: destError } = await supabase
      .from('productos')
      .select('titulo, precio, categoria')
      .eq('destacado', true)
      .limit(5);
    
    if (destError) {
      console.log('‚ùå Error obteniendo destacados:', destError.message);
    } else {
      console.log(`‚≠ê Productos destacados: ${destacados.length}`);
      if (destacados.length > 0) {
        console.log('   Ejemplo:', destacados[0].titulo);
      }
    }
    
    // Productos por rango de precio
    const { data: precioRango, error: precioError } = await supabase
      .from('productos')
      .select('titulo, precio')
      .gte('precio', 100)
      .lte('precio', 500)
      .limit(5);
    
    if (precioError) {
      console.log('‚ùå Error obteniendo por precio:', precioError.message);
    } else {
      console.log(`üí∞ Productos entre $100-$500: ${precioRango.length}`);
    }
    
    console.log('\nüéâ Pruebas completadas!');
    
    // Resumen final
    console.log('\nüìã Resumen:');
    console.log(`   Total productos: ${totalCount || 'N/A'}`);
    console.log(`   Categor√≠as: ${categoriasUnicas?.length || 'N/A'}`);
    console.log(`   Destacados: ${destacados?.length || 'N/A'}`);
    console.log(`   Conexi√≥n: ‚úÖ`);
    
  } catch (error) {
    console.error('üí• Error durante las pruebas:', error);
  }
}

// Ejecutar pruebas
if (import.meta.url === `file://${process.argv[1]}`) {
  testSupabase();
}

export { testSupabase };
